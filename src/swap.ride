#testnet address for example 3N8HqrJvSK4nhZQTAJaJ1aoaFj2je1PnCUD (token_test + usdn)

{-# STDLIB_VERSION 5     #-}
{-# SCRIPT_TYPE ACCOUNT  #-}
{-# CONTENT_TYPE DAPP    #-}

### keys ###

#validate Address
func getAddressIfValid(address: String) = toString(valueOrErrorMessage(addressFromString(address), (("Can't parse " + address) + " as address")))

#value data account
let main = "main_asset"
let a1 = "swap_asset1_"
let sst = "address_pool_"
let swp = "address_swap_"
let a2 = "swap_asset2_"
let acvt = "activate"

#rate value
let exchangeRate = 5


@Callable(i)
func setAdminAccount(address: String) = {
  if((i.caller == this))
    then [BinaryEntry("admin", address.toBytes())]
  else throw("Only the Admin itself can invoke this function")
}

@Callable(i)
func exchangeAssetPair(rate:Int) = {
  let PMAA = getBinaryValue(this, "admin")
  if(isDefined(PMAA))
   then 
#value for swap
let admin = Address(PMAA)
let staker = Address(admin.getString(swp + toBase58String(this.bytes)).valueOrErrorMessage("Swap not configured on admin account.").fromBase58String())
let asset1 = admin.getString(a1 + toBase58String(this.bytes)).valueOrErrorMessage("Asset1 not set correctly for this Swap in the admin account.").fromBase58String()
let asset2 = admin.getString(a2 + toBase58String(this.bytes)).valueOrErrorMessage("Asset2 not set correctly for this Swap in the admin account.").fromBase58String()
let mainAsset = admin.getString(main).valueOrErrorMessage("Asset Main has not yet been defined in the admin account.").fromBase58String()
let activate = admin.getBooleanValue(acvt).valueOrErrorMessage("The dApp is still not started or started incorrectly.") 
  if(activate)
    then 
      if(rate != exchangeRate)
    then 
      if (i.payments[0].assetId != asset1 || i.payments[1].assetId != asset2)
      then
        throw("unexpected asset")
      else {
        strict r = invoke(staker, "cancelStake", [i.payments[0].amount * rate], [])
        [ScriptTransfer(i.caller, i.payments[0].amount * rate, i.payments[1].assetId) ]
    } 
  else{
      if (i.payments[0].assetId != asset1 || i.payments[1].assetId != asset2)
      then
        throw("unexpected asset")
      else {
        strict r = invoke(staker, "cancelStake", [i.payments[0].amount * rate], [])
        [ScriptTransfer(i.caller, i.payments[0].amount * rate, i.payments[1].assetId) ]
    } 
  }
  else{
    throw("DApp is inactive at this moment")
  }
  else{
    throw("Admin account is not defined.")
  }
}

